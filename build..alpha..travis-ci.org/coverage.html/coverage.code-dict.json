{"/home/travis/build/npmtest/node-npmtest-oauth20-provider/test.js":"/* istanbul instrument in package npmtest_oauth20_provider */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-oauth20-provider/lib.npmtest_oauth20_provider.js":"/* istanbul instrument in package npmtest_oauth20_provider */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_oauth20_provider = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_oauth20_provider = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-oauth20-provider/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-oauth20-provider && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_oauth20_provider */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_oauth20_provider\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_oauth20_provider.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_oauth20_provider.rollup.js'] =\n            local.assetsDict['/assets.npmtest_oauth20_provider.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_oauth20_provider.__dirname +\n                    '/lib.npmtest_oauth20_provider.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/index.js":"var\n    model = require('./model/'),\n    controller = require('./controller'),\n    middleware = require('./middleware'),\n    decision = require('./controller/authorization/decision'),\n    logger = require('./util/logger.js');\n\nvar oauth2 = function(options) {\n    var _self = this;\n\n    options = options || {};\n\n    options.log = options.log || {\n        level: 0,\n        color: true\n    };\n\n//    options.flows = options.flows || [\n//        'authorization_code',\n//        'implicit',\n//        'password',\n//        'client_credentials'\n//    ];\n\n    this.options = options;\n\n    // Initialize objects (available for redefinition)\n    this.logger = new logger(this.options.log);\n    this.model = model;\n    this.decision = decision;\n\n    this.logger.info('OAuth2 library initialized');\n\n    // Injection method\n    this.inject = function() {\n        return function(req, res, next) {\n            _self.logger.debug('Injecting oauth2 into request');\n            req.oauth2 = _self;\n            next();\n        }\n    };\n};\n\noauth2.prototype.controller = controller;\noauth2.prototype.middleware = middleware;\n\nmodule.exports = oauth2;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/model/index.js":"module.exports = {\n    accessToken:    require('./accessToken.js'),\n    client:         require('./client.js'),\n    code:           require('./code.js'),\n    refreshToken:   require('./refreshToken.js'),\n    user:           require('./user.js')\n};\n// @todo: find and remove unnecessary methods in all the models","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/model/accessToken.js":"var\n    error = require('./../error');\n\n/**\n* Typical accessToken schema:\n* userId:   { type: \"object\", required: true },\n* clientId: { type: \"object\", required: true },\n* token:    { type: \"string\", required: true, unique: true },\n* scope:  { type: \"array\", required: false,\n*     items: { type: \"string\", enum: [\"possible\", \"scope\", \"values\"] },\n* }\n *\n * Primary key: token\n * @todo: CHECK IT, seems no need to be unique\n * Unique key: userId + clientId pair should be unique\n */\n\n/**\n * Gets token of the accessToken\n *\n * @param accessToken {Object} accessToken object\n */\nmodule.exports.getToken = function(accessToken) {\n    throw new error.serverError('accessToken model method \"getToken\" is not implemented');\n};\n\n/**\n * Fetches accessToken object by token\n * Should be implemented with server logic\n *\n * Remember to check ttl if ttl is saved in object (if ttl is not valid return null)\n *\n * @param token {String} Unique identifier\n * @param cb {Function} Function callback ->(error, object)\n */\nmodule.exports.fetchByToken = function(token, cb) {\n    throw new error.serverError('accessToken model method \"fetchByToken\" is not implemented');\n};\n\n/**\n * Fetches accessToken object by userId-clientId pair\n * Should be implemented with server logic\n *\n * @param userId {String} Unique identifier\n * @param clientId {String} Unique identifier\n * @param cb {Function} Function callback ->(error, object)\n */\nmodule.exports.fetchByUserIdClientId = function(userId, clientId, cb) {\n    throw new error.serverError('accessToken model method \"fetchByUserIdClientId\" is not implemented');\n};\n\n/**\n * Check if accessToken is valid and not expired\n *\n * @param accessToken\n */\nmodule.exports.checkTTL = function(accessToken) {\n    throw new error.serverError('accessToken model method \"checkTTL\" is not implemented');\n};\n\n/**\n * Create accessToken object (generate + save)\n * Should be implemented with server logic\n *\n * @param userId {String} Unique identifier\n * @param clientId {String} Unique identifier\n * @param scope {Array|null} Scope values\n * @param ttl {Number} Time to live in seconds\n * @param cb {Function} Function callback ->(error, token{String})\n */\nmodule.exports.create = function(userId, clientId, scope, ttl, cb) {\n    throw new error.serverError('accessToken model method \"create\" is not implemented');\n};\n\n/**\n * Access token time to live\n * @type {Number} Seconds\n */\nmodule.exports.ttl = 3600;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/index.js":"module.exports = {\n    accessDenied:               require('./accessDenied.js'),\n    forbidden:                  require('./forbidden.js'),\n    invalidClient:              require('./invalidClient.js'),\n    invalidGrant:               require('./invalidGrant.js'),\n    invalidRequest:             require('./invalidRequest.js'),\n    invalidScope:               require('./invalidScope.js'),\n    oauth2:                     require('./oauth2.js'),\n    serverError:                require('./serverError.js'),\n    unauthorizedClient:         require('./unauthorizedClient.js'),\n    unsupportedGrantType:       require('./unsupportedGrantType.js'),\n    unsupportedResponseType:    require('./unsupportedResponseType.js')\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/accessDenied.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\nvar accessDenied = function (msg) {\n    accessDenied.super_.call(this, 'access_denied', msg, 403, this.constructor);\n};\nutil.inherits(accessDenied, oauth2);\naccessDenied.prototype.name = 'OAuth2AccessDenied';\naccessDenied.prototype.logLevel = 'info';\n\nmodule.exports = accessDenied;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/oauth2.js":"var\n    util = require('util');\n\nvar oauth2 = function (code, msg, status, constructor) {\n    Error.call(this);\n    Error.captureStackTrace(this, constructor || this.constructor);\n\n    this.code = code;\n    this.message = msg;\n    this.status = status;\n};\nutil.inherits(oauth2, Error);\noauth2.prototype.name = 'OAuth2AbstractError';\noauth2.prototype.logLevel = 'error';\n\nmodule.exports = oauth2;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/forbidden.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\n// @todo: check standards (and other libraries) for error in case of wrong access_token\nvar forbidden = function (msg) {\n    forbidden.super_.call(this, 'forbidden', msg, 403, this.constructor);\n};\nutil.inherits(forbidden, oauth2);\nforbidden.prototype.name = 'OAuth2Forbidden';\nforbidden.prototype.logLevel = 'warn';\n\nmodule.exports = forbidden;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/invalidClient.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\nvar invalidClient = function (msg) {\n    invalidClient.super_.call(this, 'invalid_client', msg, 401, this.constructor);\n};\nutil.inherits(invalidClient, oauth2);\ninvalidClient.prototype.name = 'OAuth2InvalidClient';\ninvalidClient.prototype.logLevel = 'info';\n\nmodule.exports = invalidClient;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/invalidGrant.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\nvar invalidGrant = function (msg) {\n    invalidGrant.super_.call(this, 'invalid_grant', msg, 400, this.constructor);\n};\nutil.inherits(invalidGrant, oauth2);\ninvalidGrant.prototype.name = 'OAuth2InvalidGrant';\ninvalidGrant.prototype.logLevel = 'info';\n\nmodule.exports = invalidGrant;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/invalidRequest.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\nvar invalidRequest = function (msg) {\n    invalidRequest.super_.call(this, 'invalid_request', msg, 400, this.constructor);\n};\nutil.inherits(invalidRequest, oauth2);\ninvalidRequest.prototype.name = 'OAuth2InvalidRequest';\ninvalidRequest.prototype.logLevel = 'info';\n\nmodule.exports = invalidRequest;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/invalidScope.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\nvar invalidScope = function (msg) {\n    invalidScope.super_.call(this, 'invalid_scope', msg, 400, this.constructor);\n};\nutil.inherits(invalidScope, oauth2);\ninvalidScope.prototype.name = 'OAuth2InvalidScope';\ninvalidScope.prototype.logLevel = 'info';\n\nmodule.exports = invalidScope;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/serverError.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\nvar serverError = function (msg) {\n    serverError.super_.call(this, 'server_error', msg, 500, this.constructor);\n};\nutil.inherits(serverError, oauth2);\nserverError.prototype.name = 'OAuth2ServerError';\nserverError.prototype.logLevel = 'error';\n\nmodule.exports = serverError;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/unauthorizedClient.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\nvar unauthorizedClient = function (msg) {\n    unauthorizedClient.super_.call(this, 'unauthorized_client', msg, 400, this.constructor);\n};\nutil.inherits(unauthorizedClient, oauth2);\nunauthorizedClient.prototype.name = 'OAuth2UnauthorizedClient';\nunauthorizedClient.prototype.logLevel = 'info';\n\nmodule.exports = unauthorizedClient;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/unsupportedGrantType.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\nvar unsupportedGrantType = function (msg) {\n    unsupportedGrantType.super_.call(this, 'unsupported_grant_type', msg, 400, this.constructor);\n};\nutil.inherits(unsupportedGrantType, oauth2);\nunsupportedGrantType.prototype.name = 'OAuth2UnsupportedGrantType';\nunsupportedGrantType.prototype.logLevel = 'info';\n\nmodule.exports = unsupportedGrantType;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/error/unsupportedResponseType.js":"var\n    util = require('util'),\n    oauth2 = require('./oauth2.js');\n\nvar unsupportedResponseType = function (msg) {\n    unsupportedResponseType.super_.call(this, 'unsupported_response_type', msg, 400, this.constructor);\n};\nutil.inherits(unsupportedResponseType, oauth2);\nunsupportedResponseType.prototype.name = 'OAuth2UnsupportedResponseType';\nunsupportedResponseType.prototype.logLevel = 'info';\n\nmodule.exports = unsupportedResponseType;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/model/client.js":"var\n    error = require('./../error');\n\n/**\n * Typical client schema:\n * _id:    { type: \"object\", required: true, unique: true },\n * name:   { type: \"string\", required: true },\n * secret: { type: \"string\", required: true },\n * uri:    { type: \"string\", required: false },\n * scope:  { type: \"array\", required: false,\n *     items: { type: \"string\", enum: [\"possible\", \"scope\", \"values\"] },\n  * },\n * grants: { type: \"array\", required: false,\n *     items: { type: \"string\", enum: [\"authorization_code\", \"implicit\", \"password\", \"client_credentials\"] }\n * }\n */\n\n/**\n * Gets clients primary key\n *\n * @param client {Object} Client object\n */\nmodule.exports.getId = function(client) {\n    throw new error.serverError('Client model method \"getId\" is not implemented');\n};\n\n/**\n * Gets clients secret\n *\n * @param client {Object} Client object\n */\nmodule.exports.getSecret = function(client) {\n    throw new error.serverError('Client model method \"getSecret\" is not implemented');\n};\n\n/**\n * Gets clients redirect uri\n *\n * @param client {Object} Client object\n */\nmodule.exports.getRedirectUri = function(client) {\n    throw new error.serverError('Client model method \"getRedirectUri\" is not implemented');\n};\n\n/**\n * Fetches client object by primary key\n * Should be implemented with server logic\n *\n * @param clientId {String} Unique identifier\n * @param cb {Function} Function callback ->(error, object)\n */\nmodule.exports.fetchById = function(clientId, cb) {\n    /**\n     * For example:\n     *\n     */\n    throw new error.serverError('Client model method \"fetchById\" is not implemented');\n};\n\n/**\n * Checks secret for the client\n * Function arguments MAY be different\n *\n * @param client {Object} Client object\n * @param secret {String} Password to be checked\n */\nmodule.exports.checkSecret = function(client, secret, cb) {\n    /**\n     * For example:\n     * superHashFunction(secret, function(err, hash){\n     *  if(err){\n     *      return cb(err);\n     *  }\n     *\n     *  cb(null,client.secret === hash)\n     * });\n     *\n     * OR for sync hash function\n     *\n     * cb(null, client.secret != superHashFunction(secret));\n     *\n     */\n    throw new error.serverError('Client model method \"checkSecret\" is not implemented');\n};\n\n/**\n * Checks grant type permission for the client\n * Default: do not check it\n * Function arguments MAY be different\n *\n * @param client {Object} Client object\n * @param grant {String} Grant type to be checked for\n */\nmodule.exports.checkGrantType = function(client, grant) {\n    /**\n     * For example:\n     * if (client.grants.indexOf(grant) !== -1) return true;\n     * else false;\n     */\n    return true;\n};\n\n/**\n * Checks scope permission for the client\n * Default: do not check it, return empty array\n * Function arguments MAY be different\n *\n * @param client {Object} Client object\n * @param scope {String} Scope string (space delimited) passed via parameters\n * @return {Array|boolean} Return checked scope array or false\n */\nmodule.exports.checkScope = function(client, scope) {\n    /**\n     * For example:\n     * scope.forEach(function(item) {\n     *   if (scope.indexOf(item) == -1) return false;\n     * });\n     * return scope;\n     */\n    return [];\n};\n\n/**\n * Transforms scope body parameter to scope array\n *\n * @param scope\n */\nmodule.exports.transformScope = function(scope) {\n    if (!scope) return [];\n    return scope.split(' ');\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/model/code.js":"var\n    error = require('./../error');\n\n/**\n * Typical code schema:\n * userId:   { type: \"object\", required: true },\n * clientId: { type: \"object\", required: true },\n * code:    { type: \"string\", required: true, unique: true },\n * scope:  { type: \"array\", required: false,\n *     items: { type: \"string\", enum: [\"possible\", \"scope\", \"values\"] },\n * }\n *\n * Primary key: code\n * Unique key: userId + clientId pair should be unique\n */\n\n/**\n * Get userId parameter\n *\n * @param code {Object} Code object\n */\nmodule.exports.getUserId = function(code) {\n    throw new error.serverError('Code model method \"getUserId\" is not implemented');\n};\n\n/**\n * Get clientId parameter\n *\n * @param code {Object} Code object\n */\nmodule.exports.getClientId = function(code) {\n    throw new error.serverError('Code model method \"getClientId\" is not implemented');\n};\n\n/**\n * Get scope parameter\n *\n * @param code {Object} Code object\n */\nmodule.exports.getScope = function(code) {\n    throw new error.serverError('Code model method \"getScope\" is not implemented');\n};\n\n/**\n * Fetches accessToken object by token\n * Should be implemented with server logic\n *\n * Remember to check ttl if ttl is saved in object (if ttl is not valid return null)\n *\n * @param code {String} Unique identifier\n * @param cb {Function} Function callback ->(error, object)\n */\nmodule.exports.fetchByCode = function(code, cb) {\n    throw new error.serverError('Code model method \"fetchByCode\" is not implemented');\n};\n\n/**\n * Create code object (generate + save)\n * Should be implemented with server logic\n *\n * @param userId {String} Unique identifier\n * @param clientId {String} Unique identifier\n * @param scope {Array|null} Scope values\n * @param ttl {Number} Time to live in seconds\n * @param cb {Function} Function callback ->(error, code{String})\n */\nmodule.exports.create = function(userId, clientId, scope, ttl, cb) {\n    throw new error.serverError('Code model method \"create\" is not implemented');\n};\n\n/**\n * Remove code object (already used)\n * Should be implemented with server logic\n *\n * @param code {String} Generated code string\n * @param cb {Function} Function callback ->(error)\n */\nmodule.exports.removeByCode = function(code, cb) {\n    throw new error.serverError('Code model method \"removeByCode\" is not implemented');\n};\n\n/**\n * Access token time to live\n * @type {Number} Seconds\n */\nmodule.exports.ttl = 300;","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/model/refreshToken.js":"var\n    error = require('./../error');\n\n/**\n * Typical refreshToken schema:\n * userId:   { type: \"object\", required: true },\n * clientId: { type: \"object\", required: true },\n * token:    { type: \"string\", required: true, unique: true },\n * scope:  { type: \"array\", required: false,\n *     items: { type: \"string\", enum: [\"possible\", \"scope\", \"values\"] },\n * }\n *\n * Primary key: token\n * Unique key: userId + clientId pair should be unique\n */\n\n/**\n* Gets userId parameter of the refreshToken\n*\n* @param refreshToken {Object} RefreshToken object\n*/\nmodule.exports.getUserId = function(refreshToken) {\n    throw new error.serverError('RefreshToken model method \"getUserId\" is not implemented');\n};\n\n/**\n * Gets clientId parameter of the refreshToken\n *\n * @param refreshToken {Object} RefreshToken object\n */\nmodule.exports.getClientId = function(refreshToken) {\n    throw new error.serverError('RefreshToken model method \"getClientId\" is not implemented');\n};\n\n/**\n * Gets scope parameter of the refreshToken\n *\n * @param refreshToken {Object} RefreshToken object\n */\nmodule.exports.getScope = function(refreshToken) {\n    throw new error.serverError('RefreshToken model method \"getScope\" is not implemented');\n};\n\n/**\n * Fetches refreshToken object by token\n * Should be implemented with server logic\n *\n * @param token {String} Unique identifier\n * @param cb {Function} Function callback ->(error, object)\n */\nmodule.exports.fetchByToken = function(token, cb) {\n    throw new error.serverError('RefreshToken model method \"fetchByToken\" is not implemented');\n};\n\n/**\n * Removes refreshToken (revokes) for the client-user pair\n * Should be implemented with server logic\n *\n * @param userId {String} Unique identifier\n * @param clientId {String} Unique identifier\n * @param cb {Function} Function callback ->(error)\n */\nmodule.exports.removeByUserIdClientId = function(userId, clientId, cb) {\n    throw new error.serverError('RefreshToken model method \"removeByUserIdClientId\" is not implemented');\n};\n\n/**\n * Create refreshToken object (generate + save)\n * Should be implemented with server logic\n *\n * @param userId {String} Unique identifier\n * @param clientId {String} Unique identifier\n * @param scope {Array|null} Scope values\n * @param cb {Function} Function callback ->(error, token{String})\n */\nmodule.exports.create = function(userId, clientId, scope, cb) {\n    throw new error.serverError('RefreshToken model method \"create\" is not implemented');\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/model/user.js":"var\n    error = require('./../error');\n\n/**\n * User schema is defined by server side logic\n */\n\n/**\n * Gets primary key of the user\n *\n * @param user {Object} User object\n */\nmodule.exports.getId = function(user) {\n    throw new error.serverError('User model method \"getId\" is not implemented');\n};\n\n/**\n * Fetches user object by primary key\n * Should be implemented with server logic\n *\n * @param userId {String} Unique identifier\n * @param cb {Function} Function callback ->(error, object)\n */\nmodule.exports.fetchById = function(userId, cb) {\n    throw new error.serverError('User model method \"fetchById\" is not implemented');\n};\n\n/**\n * Fetches user object by primary key\n * Should be implemented with server logic\n *\n * @param username {String} Unique username/login\n * @param cb {Function} Function callback ->(error, object)\n */\nmodule.exports.fetchByUsername = function(username, cb) {\n    throw new error.serverError('User model method \"fetchByUsername\" is not implemented');\n};\n\n/**\n * Checks password for the user\n * Function arguments MAY be different\n *\n * @param user {Object} User object\n * @param password {String} Password to be checked\n * @param cb {Function} Function callback -> (error, boolean) If input is correct\n */\nmodule.exports.checkPassword = function(user, password, cb) {\n    /**\n     * In case of sync check function use:\n     * (user.password == superHashFunction(password)) ? cb(null, true) : cb(null, false);\n     */\n    throw new error.serverError('User model method \"checkPassword\" is not implemented');\n};\n\n/**\n * Fetch user object from session (fetch logged user only)\n *\n * @param req\n */\nmodule.exports.fetchFromRequest = function(req) {\n    throw new error.serverError('User model method \"fetchFromRequest\" is not implemented');\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/index.js":"module.exports = {\n    authorization:  require('./authorization.js'),\n    token:          require('./token.js')\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/authorization.js":"var\n    async = require('async'),\n    authorization = require('./authorization/'),\n    response = require('./../util/response.js'),\n    error = require('./../error');\n\n/**\n * Authorization Endpoint controller\n * Used for: \"authorization_code\", \"implicit\" flows\n *\n * @see http://tools.ietf.org/html/rfc6749#section-3.1\n * @param req Request object\n * @param res Response object\n * @param next Optional parameter\n */\nmodule.exports = function(req, res, next) {\n    req.oauth2.logger.debug('Invoking authorization endpoint');\n\n    var clientId,\n        redirectUri,\n        responseType,\n        grantType,\n        client,\n        scope,\n        user;\n\n    async.waterfall([\n        // Check redirect uri\n        function(cb) {\n            if (!req.query.redirect_uri)\n                return cb(new error.invalidRequest('RedirectUri is mandatory for authorization endpoint'));\n\n            redirectUri = req.query.redirect_uri;\n            req.oauth2.logger.debug('RedirectUri parsed: ', redirectUri);\n            cb();\n        },\n        // Check client credentials\n        function(cb) {\n            if (!req.query.client_id)\n                return cb(new error.invalidRequest('ClientId is mandatory for authorization endpoint'));\n\n            // Check for client_secret (prevent from passing it)\n            if (req.query.client_secret)\n                return cb(new error.invalidRequest('ClientSecret should not be passed by public clients'))\n\n            clientId = req.query.client_id;\n            req.oauth2.logger.debug('ClientId parsed: ', clientId);\n            cb();\n        },\n        // Check response type parameter\n        function(cb) {\n            if (!req.query.response_type)\n                return cb(new error.invalidRequest('ResponseType parameter is mandatory for authorization endpoint'));\n\n            responseType = req.query.response_type;\n            req.oauth2.logger.debug('Parameter response_type parsed: ', responseType);\n            cb();\n        },\n        // Check grant type supported by server\n        function(cb) {\n            switch (responseType) {\n                case 'code':\n                    grantType = 'authorization_code';\n                    break;\n                case 'token':\n                    grantType = 'implicit';\n                    break;\n                default:\n                    return cb(new error.unsupportedResponseType('Unknown response_type parameter passed'))\n                    break;\n            }\n            req.oauth2.logger.debug('Parameter response_type parsed: ', responseType);\n            cb();\n        },\n        // Fetch client\n        function(cb) {\n            req.oauth2.model.client.fetchById(clientId, function(err, obj) {\n                if (err)\n                    cb(new error.serverError('Failed to call client::fetchById method'));\n                else if (!obj)\n                    cb(new error.invalidClient('Client not found'));\n                else {\n                    req.oauth2.logger.debug('Client fetched: ', obj);\n                    client = obj;\n                    cb();\n                }\n            });\n        },\n        // Check redirect uri\n        function(cb) {\n            if (!req.oauth2.model.client.getRedirectUri(client))\n                cb(new error.unsupportedResponseType('RedirectUri is not set for the client'));\n            else if (req.oauth2.model.client.getRedirectUri(client) != redirectUri)\n                cb(new error.invalidRequest('Wrong RedirectUri provided'));\n            else {\n                req.oauth2.logger.debug('RedirectUri check passed: ', redirectUri);\n                cb();\n            }\n        },\n        // Check grant type available for the client\n        function(cb) {\n            if (!req.oauth2.model.client.checkGrantType(client, grantType))\n                cb(new error.unauthorizedClient('Grant type is not available for the client'));\n            else {\n                req.oauth2.logger.debug('Grant type check passed');\n                cb();\n            }\n        },\n        // Parse and check scope against supported and client available scopes\n        function(cb) {\n            scope = req.oauth2.model.client.transformScope(req.query.scope);\n            scope = req.oauth2.model.client.checkScope(client, scope);\n            if (!scope)\n                cb(new error.invalidScope('Invalid scope for the client'));\n            else {\n                req.oauth2.logger.debug('Scope check passed: ', scope);\n                cb();\n            }\n        },\n        // Fetch user from request\n        function(cb) {\n            user = req.oauth2.model.user.fetchFromRequest(req);\n            if (!user)\n                cb(new error.invalidRequest('Failed to fetch logged user from request parameters'))\n            else {\n                req.oauth2.logger.debug('User fetched from request: ', user);\n                cb();\n            }\n        }\n    ],\n    function(err) {\n        if (err) response.error(req, res, err, redirectUri);\n        else {\n            if (req.method == 'GET')\n                req.oauth2.decision(req, res, client, scope, user, redirectUri);\n            else if (grantType == 'authorization_code')\n                authorization.code(req, res, client, scope, user, redirectUri);\n            else if (grantType == 'implicit')\n                authorization.implicit(req, res, client, scope, user, redirectUri);\n            else\n                response.error(req, res, new error.invalidRequest('Wrong request method'), redirectUri);\n        }\n    });\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/authorization/index.js":"module.exports = {\n    code:       require('./code'),\n    implicit:   require('./implicit')\n};\n","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/authorization/code.js":"var\n    async = require('async'),\n    error = require('./../../error'),\n    response = require('./../../util/response.js');\n\n// @todo: move decision var to config\n// @todo: add state\n\nmodule.exports = function(req, res, client, scope, user, redirectUri) {\n\n    var\n        codeValue;\n\n    async.waterfall([\n        // Check user decision\n        function(cb) {\n            if (!req.body || typeof(req.body['decision']) == 'undefined')\n                cb(new error.invalidRequest('No decision parameter passed'));\n            else if (req.body['decision'] == 0)\n                cb(new error.accessDenied('User denied the access to the resource'));\n            else {\n                req.oauth2.logger.debug('Decision check passed');\n                cb();\n            }\n        },\n        // Issue new code\n        function(cb) {\n            req.oauth2.model.code.create(req.oauth2.model.user.getId(user), req.oauth2.model.client.getId(client), scope, req.oauth2.model.code.ttl, function(err, data) {\n                if (err)\n                    cb(new error.serverError('Failed to call code::save method'));\n                else {\n                    codeValue = data;\n                    req.oauth2.logger.debug('Access token saved: ', codeValue);\n                    cb();\n                }\n            });\n        }\n    ],\n    function(err) {\n        if (err) response.error(req, res, err, redirectUri);\n        else response.data(req, res, {code: codeValue}, redirectUri);\n    });\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/util/response.js":"var\n    query = require('querystring'),\n    error = require('../error/');\n\nfunction data(req, res, code, data) {\n    res.statusCode = code;\n    res.header('Cache-Control', 'no-store');\n    res.header('Pragma','no-cache');\n    res.send(data);\n    req.oauth2.logger.debug('Response: ', data);\n}\n\nfunction redirect(req, res, redirectUri) {\n    res.statusCode = 302;\n    res.header('Location', redirectUri);\n    res.end();\n    req.oauth2.logger.debug('Redirect to: ', redirectUri);\n}\n\nmodule.exports.error = function(req, res, err, redirectUri) {\n    // Transform unknown error\n    if (!(err instanceof error.oauth2)) {\n        req.oauth2.logger.error(err.stack);\n        err = new error.serverError('Uncaught exception');\n    }\n    else\n        req.oauth2.logger[err.logLevel]('Exception caught', err.stack);\n\n    if (redirectUri) {\n        var obj = {\n            error: err.code,\n            error_description: err.message\n        };\n        if (req.query.state) obj.state = req.query.state;\n        redirectUri += '?' + query.stringify(obj);\n        redirect(req, res, redirectUri);\n    }\n    else\n        data(req, res, err.status, {error: err.code, error_description: err.message});\n};\n\nmodule.exports.data = function(req, res, obj, redirectUri, anchor) {\n    if (redirectUri) {\n        if (anchor)\n            redirectUri += '#';\n        else\n            redirectUri += (redirectUri.indexOf('?') == -1 ? '?' : '&');\n        if (req.query.state) obj.state = req.query.state;\n        redirectUri += query.stringify(obj);\n        redirect(req, res, redirectUri);\n    }\n    else\n        data(req, res, 200, obj);\n};\n","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/authorization/implicit.js":"var\n    async = require('async'),\n    error = require('./../../error'),\n    response = require('./../../util/response.js');\n\n// @todo: move decision var to config\n// @todo: add state\n\nmodule.exports = function(req, res, client, scope, user, redirectUri) {\n\n    var\n        accessTokenValue;\n\n    async.waterfall([\n        // Check user decision\n        function(cb) {\n            if (!req.body || typeof(req.body['decision']) == 'undefined')\n                cb(new error.invalidRequest('No decision parameter passed'));\n            else if (req.body['decision'] == 0)\n                cb(new error.accessDenied('User denied the access to the resource'));\n            else {\n                req.oauth2.logger.debug('Decision check passed');\n                cb();\n            }\n        },\n        // Generate new accessToken and save it\n        function(cb) {\n            req.oauth2.model.accessToken.create(req.oauth2.model.user.getId(user), req.oauth2.model.client.getId(client), scope, req.oauth2.model.accessToken.ttl, function(err, data) {\n                if (err)\n                    cb(new error.serverError('Failed to call accessToken::save method'));\n                else {\n                    accessTokenValue = data;\n                    req.oauth2.logger.debug('Access token saved: ', accessTokenValue);\n                    cb();\n                }\n            });\n        }\n    ],\n    function(err) {\n        if (err) response.error(req, res, err, redirectUri);\n        else response.data(req, res, {\n            token_type:    \"bearer\",\n            access_token:  accessTokenValue,\n            expires_in:    req.oauth2.model.accessToken.ttl\n        }, redirectUri, true);\n    });\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/token.js":"var\n    async = require('async'),\n    token = require('./token/'),\n    response = require('./../util/response.js'),\n    error = require('./../error');\n\n/**\n * Token endpoint controller\n * Used for: \"authorization_code\", \"password\", \"client_credentials\", \"refresh_token\" flows\n *\n * @see http://tools.ietf.org/html/rfc6749#section-3.2\n * @param req Request object\n * @param res Response object\n */\nmodule.exports = function(req, res) {\n    req.oauth2.logger.debug('Invoking token endpoint');\n\n    var clientId,\n        clientSecret,\n        grantType,\n        client;\n\n    async.waterfall([\n        // Parse client credentials from BasicAuth header\n        function(cb) {\n            if (!req.headers || !req.headers.authorization)\n                return cb(new error.invalidRequest('No authorization header passed'));\n\n            var pieces = req.headers.authorization.split(' ', 2);\n            if (!pieces || pieces.length !== 2)\n                return cb(new error.invalidRequest('Authorization header is corrupted'));\n\n            if (pieces[0] !== 'Basic')\n                return cb(new error.invalidRequest('Unsupported authorization method: ', pieces[0]));\n\n            pieces = new Buffer(pieces[1], 'base64').toString('ascii').split(':', 2);\n            if (!pieces || pieces.length !== 2)\n                return cb(new error.invalidRequest('Authorization header has corrupted data'));\n\n            clientId = pieces[0];\n            clientSecret = pieces[1];\n            req.oauth2.logger.debug('Client credentials parsed from basic auth header: ', clientId, clientSecret);\n            cb();\n        },\n        // Check grant type for server support\n        function(cb) {\n            if (!req.body.grant_type)\n                cb(new error.invalidRequest('Body does not contain grant_type parameter'));\n\n            grantType = req.body.grant_type;\n            req.oauth2.logger.debug('Parameter grant_type passed: ', grantType);\n            cb();\n        },\n        // Fetch client and check credentials\n        function(cb) {\n            req.oauth2.model.client.fetchById(clientId, function(err, obj) {\n                if (err)\n                    cb(new error.serverError('Failed to call client::fetchById method'));\n                else if (!obj)\n                    cb(new error.invalidClient('Client not found'));\n                else {\n                    req.oauth2.logger.debug('Client fetched: ', obj);\n                    client = obj;\n                    cb();\n                }\n            });\n        },\n        function(cb){\n            req.oauth2.model.client.checkSecret(client, clientSecret, function(err, valid){\n                if(err)\n                    cb(new error.serverError('Failed to call client::checkSecret method'));\n                else if (!valid)\n                    cb(new error.invalidClient('Wrong client secret provided'));\n                else\n                    cb();\n            });\n        },\n        // Check grant type against client available\n        function(cb) {\n            if (!req.oauth2.model.client.checkGrantType(client, grantType) && grantType !== 'refresh_token')\n                cb(new error.unauthorizedClient('Grant type is not available for the client'));\n            else {\n                req.oauth2.logger.debug('Grant type check passed');\n                cb();\n            }\n        },\n        function(cb) {\n            switch (grantType) {\n                case 'authorization_code':\n                    token.authorizationCode(req.oauth2, client, req.body.code, req.body.redirect_uri, cb);\n                    break;\n                case 'password':\n                    token.password(req.oauth2, client, req.body.username, req.body.password, req.body.scope, cb);\n                    break;\n                case 'client_credentials':\n                    token.clientCredentials(req.oauth2, client, req.body.scope, cb);\n                    break;\n                case 'refresh_token':\n                    token.refreshToken(req.oauth2, client, req.body.refresh_token, req.body.scope, cb);\n                    break;\n                default:\n                    cb(new error.unsupportedGrantType('Grant type does not match any supported type'));\n                    break;\n            }\n        }\n    ],\n    function(err, data) {\n        if (err) response.error(req, res, err);\n        else response.data(req, res, data);\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/token/index.js":"module.exports = {\n    authorizationCode:  require('./authorizationCode.js'),\n    clientCredentials:  require('./clientCredentials.js'),\n    password:           require('./password.js'),\n    refreshToken:       require('./refreshToken.js')\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/token/authorizationCode.js":"var\n    async = require('async'),\n    error = require('./../../error');\n\nmodule.exports = function(oauth2, client, sCode, redirectUri, pCb) {\n\n    // Define variables\n    var responseObj = {\n        token_type:    \"bearer\"\n    };\n    var code,\n        refreshTokenValue,\n        accessTokenValue;\n\n    async.waterfall([\n        // Fetch code\n        function(cb) {\n            oauth2.model.code.fetchByCode(sCode, function(err, obj) {\n                if (err)\n                    cb(new error.serverError('Failed to call code::fetchByCode method'));\n                else if (!obj)\n                    cb(new error.invalidGrant('Code not found'))\n                else if (oauth2.model.code.getClientId(obj) != oauth2.model.client.getId(client))\n                    cb(new error.invalidGrant('Code is issued by another client'));\n                else if (!oauth2.model.code.checkTTL(obj))\n                    cb(new error.invalidGrant('Code is already expired'));\n                else {\n                    oauth2.logger.debug('Code fetched: ', obj);\n                    code = obj;\n                    cb();\n                }\n            });\n        },\n        // @todo: clarify. Check redirectUri? Weird standard, why should we?\n        // Remove old refreshToken (if exists) with userId-clientId pair\n        function(cb) {\n            oauth2.model.refreshToken.removeByUserIdClientId(oauth2.model.code.getUserId(code), oauth2.model.code.getClientId(code), function(err) {\n                if (err)\n                    cb(new error.serverError('Failed to call refreshToken::removeByUserIdClientId method'));\n                else {\n                    oauth2.logger.debug('Refresh token removed');\n                    cb();\n                }\n            });\n        },\n        // Generate new refreshToken and save it\n        function(cb) {\n            //check if client has grant type refresh_token, if not, it will not be including in response (short time authorization)\n            if(!oauth2.model.client.checkGrantType(client, 'refresh_token')){\n                oauth2.logger.debug('Client has not the grant type refresh_token, skip creation');\n                return cb();\n            }\n\n            oauth2.model.refreshToken.create(oauth2.model.code.getUserId(code), oauth2.model.code.getClientId(code), oauth2.model.code.getScope(code), function(err, data) {\n                if (err)\n                    cb(new error.serverError('Failed to call refreshToken::save method'));\n                else {\n                    responseObj.refresh_token = data;\n                    oauth2.logger.debug('Refresh token saved: ', responseObj.refresh_token);\n                    cb();\n                }\n            });\n        },\n        // Generate new accessToken and save it\n        function(cb) {\n            oauth2.model.accessToken.create(oauth2.model.code.getUserId(code), oauth2.model.code.getClientId(code), oauth2.model.code.getScope(code), oauth2.model.accessToken.ttl, function(err, data) {\n                if (err)\n                    cb(new error.serverError('Failed to call accessToken::save method'));\n                else {\n                    responseObj.access_token = data;\n                    responseObj.expires_in = oauth2.model.accessToken.ttl;\n                    oauth2.logger.debug('Access token saved: ', responseObj.access_token);\n                    cb();\n                }\n            });\n        },\n        // Remove used code\n        function(cb) {\n            oauth2.model.code.removeByCode(sCode, function(err) {\n                if (err)\n                    cb(new error.serverError('Failed to call code::removeByCode method'));\n                else {\n                    oauth2.logger.debug('Code removed');\n                    cb();\n                }\n            });\n        }\n    ], function(err) {\n        if (err) pCb(err);\n        else pCb(null, responseObj);\n    });\n\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/token/clientCredentials.js":"var\n    async = require('async'),\n    response = require('./../../util/response.js'),\n    error = require('./../../error');\n\nmodule.exports = function(oauth2, client, scope, pCb) {\n\n    // Define variables\n    var scope,\n        accessTokenValue;\n\n    async.waterfall([\n        // Parse and check scope against supported and client available scopes\n        function(cb) {\n            scope = oauth2.model.client.transformScope(scope);\n            scope = oauth2.model.client.checkScope(client, scope);\n            if (!scope)\n                cb(new error.invalidScope('Invalid scope for the client'));\n            else {\n                oauth2.logger.debug('Scope check passed: ', scope);\n                cb();\n            }\n        },\n        // Generate new accessToken and save it\n        function(cb) {\n            oauth2.model.accessToken.create(null, oauth2.model.client.getId(client), scope, oauth2.model.accessToken.ttl, function(err, data) {\n                if (err)\n                    cb(new error.serverError('Failed to call accessToken::save method'));\n                else {\n                    accessTokenValue = data;\n                    oauth2.logger.debug('Access token saved: ', accessTokenValue);\n                    cb();\n                }\n            });\n        }\n    ],\n    function(err) {\n        if (err) pCb(err);\n        else pCb(null, {\n            token_type:    \"bearer\",\n            access_token:  accessTokenValue,\n            expires_in:    oauth2.model.accessToken.ttl\n        });\n    });\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/token/password.js":"var\n    async = require('async'),\n    error = require('./../../error');\n\nmodule.exports = function(oauth2, client, username, password, scope, pCb) {\n\n    // Define variables\n    var user,\n        scope,\n        refreshTokenValue,\n        accessTokenValue;\n\n    async.waterfall([\n        // Check username and password parameters\n        function(cb) {\n            if (!username)\n                return cb(new error.invalidRequest('Username is mandatory for password grant type'));\n            oauth2.logger.debug('Username parameter check passed: ', username);\n\n            if (!password)\n                return cb(new error.invalidRequest('Password is mandatory for password grant type'));\n            oauth2.logger.debug('Password parameter check passed: ', password);\n\n            cb();\n        },\n        // Parse and check scope against supported and client available scopes\n        function(cb) {\n            scope = oauth2.model.client.transformScope(scope);\n            scope = oauth2.model.client.checkScope(client, scope);\n            if (!scope)\n                cb(new error.invalidScope('Invalid scope for the client'));\n            else {\n                oauth2.logger.debug('Scope check passed: ', scope);\n                cb();\n            }\n        },\n        // Fetch user\n        function(cb) {\n            oauth2.model.user.fetchByUsername(username, function(err, obj) {\n                if (err)\n                    cb(new error.serverError('Failed to call user::fetchByUsername method'));\n                else if (!obj)\n                    cb(new error.invalidClient('User not found'));\n                else {\n                    oauth2.logger.debug('User fetched: ', obj);\n                    user = obj;\n                    cb();\n                }\n            });\n        },\n        // Check provided password\n        function(cb) {\n            oauth2.model.user.checkPassword(user, password, function(err, valid) {\n                if (err)\n                    cb(new error.serverError('Failed to call user:checkPassword method'));\n                else if (!valid)\n                    cb(new error.invalidClient('Wrong user password provided'));\n                else\n                    cb();\n            });\n        },\n        // Remove old refreshToken (if exists) with userId-clientId pair\n        function(cb) {\n            oauth2.model.refreshToken.removeByUserIdClientId(oauth2.model.user.getId(user), oauth2.model.client.getId(client), function(err) {\n                if (err)\n                    cb(new error.serverError('Failed to call refreshToken::removeByUserIdClientId method'));\n                else {\n                    oauth2.logger.debug('Refresh token removed');\n                    cb();\n                }\n            });\n        },\n        // Generate new refreshToken and save it\n        function(cb) {\n            oauth2.model.refreshToken.create(oauth2.model.user.getId(user), oauth2.model.client.getId(client), scope, function(err, data) {\n                if (err)\n                    cb(new error.serverError('Failed to call refreshToken::save method'));\n                else {\n                    refreshTokenValue = data;\n                    oauth2.logger.debug('Refresh token saved: ', refreshTokenValue);\n                    cb();\n                }\n            });\n        },\n        // Generate new accessToken and save it\n        function(cb) {\n            oauth2.model.accessToken.create(oauth2.model.user.getId(user), oauth2.model.client.getId(client), scope, oauth2.model.accessToken.ttl, function(err, data) {\n                if (err)\n                    cb(new error.serverError('Failed to call accessToken::save method'));\n                else {\n                    accessTokenValue = data;\n                    oauth2.logger.debug('Access token saved: ', accessTokenValue);\n                    cb();\n                }\n            });\n        }\n    ],\n    function(err) {\n        if (err) pCb(err);\n        else pCb(null, {\n            refresh_token: refreshTokenValue,\n            token_type:    \"bearer\",\n            access_token:  accessTokenValue,\n            expires_in:    oauth2.model.accessToken.ttl\n        });\n    });\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/token/refreshToken.js":"var\n    async = require('async'),\n    error = require('./../../error');\n\nmodule.exports = function(oauth2, client, refresh_token, scope, pCb) {\n    // Define variables\n    var user,\n        refreshToken,\n        accessToken,\n        accessTokenValue;\n\n    async.waterfall([\n        // Check refresh_token parameter\n        function(cb) {\n            if (!refresh_token)\n                return cb(new error.invalidRequest('RefreshToken is mandatory for refresh_token grant type'));\n            oauth2.logger.debug('RefreshToken parameter check passed: ', refresh_token);\n\n            cb();\n        },\n        // Standard is really weird here, do not check scope, just fill it from refreshToken\n        // function(cb) {CHECK SCOPE PARAMETER FUNCTION OMITTED},\n        // Fetch refreshToken\n        function(cb) {\n            oauth2.model.refreshToken.fetchByToken(refresh_token, function(err, obj) {\n                if (err)\n                    cb(new error.serverError('Failed to call refreshToken::fetchByToken method'));\n                else if (!obj)\n                    cb(new error.invalidGrant('Refresh token not found'));\n                else if (oauth2.model.refreshToken.getClientId(obj) != oauth2.model.client.getId(client)) {\n                    oauth2.logger.warn('Client id \"' + oauth2.model.client.getId(client) + '\" tried to fetch client id \"' + obj.clientId + '\" refresh token');\n                    cb(new error.invalidGrant('Refresh token not found'));\n                }\n                else {\n                    oauth2.logger.debug('RefreshToken fetched: ', obj);\n                    refreshToken = obj;\n                    cb();\n                }\n            });\n        },\n        // Fetch user\n        function(cb) {\n            oauth2.model.user.fetchById(oauth2.model.refreshToken.getUserId(refreshToken), function(err, obj) {\n                if (err)\n                    cb(new error.serverError('Failed to call user::fetchById method'));\n                else if (!obj)\n                    cb(new error.invalidClient('User not found'));\n                else {\n                    oauth2.logger.debug('User fetched: ', obj);\n                    user = obj;\n                    cb();\n                }\n            });\n        },\n        // Fetch issued access token (if it is already created and still active)\n        function(cb) {\n            oauth2.model.accessToken.fetchByUserIdClientId(oauth2.model.user.getId(user), oauth2.model.client.getId(client), function(err, obj) {\n                if (err)\n                    cb(new error.serverError('Failed to call accessToken::fetchByUserIdClientId'));\n                else if (!obj) cb();\n                else {\n                    accessToken = obj;\n                    oauth2.logger.debug('Fetched issued accessToken: ', obj);\n                    cb();\n                };\n            });\n        },\n        // Issue new one (if needed)\n        function(cb) {\n            // No need if it already exists and valid\n            if (accessToken) {\n                accessTokenValue = oauth2.model.accessToken.getToken(accessToken);\n                cb();\n            }\n            else {\n                oauth2.model.accessToken.create(oauth2.model.user.getId(user), oauth2.model.client.getId(client), oauth2.model.refreshToken.getScope(refreshToken), oauth2.model.accessToken.ttl, function(err, data) {\n                    if (err)\n                        cb(new error.serverError('Failed to call accessToken::save method'));\n                    else {\n                        accessTokenValue = data;\n                        oauth2.logger.debug('Access token saved: ', accessTokenValue);\n                        cb();\n                    }\n                });\n            }\n        }\n    ],\n    function(err) {\n        if (err) pCb(err);\n        else pCb(null, {\n            // @todo: add renew refresh token strategy\n            token_type:    \"bearer\",\n            access_token:  accessTokenValue,\n            expires_in:    oauth2.model.accessToken.ttl\n        });\n    });\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/middleware/index.js":"module.exports = {\n    bearer: require('./bearer.js')\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/middleware/bearer.js":"var\n    response = require('./../util/response.js'),\n    error = require('./../error/');\n\n// @todo: add options for HMAC, force HEADER token, no errors parsing\nmodule.exports = function (req, res, next) {\n\n    req.oauth2.logger.debug('Invoking bearer token parser middleware');\n    var token;\n\n    // Look for token in header\n    if (req.headers.authorization) {\n        var pieces = req.headers.authorization.split(' ', 2);\n        // Check auth header\n        if (!pieces || pieces.length !== 2)\n            return response.error(req, res, new error.accessDenied('Wrong authorization header'));\n        // Only bearer auth is supported\n        if (pieces[0].toLowerCase() != 'bearer')\n            return response.error(req, res, new error.accessDenied('Unsupported authorization method header'));\n        token = pieces[1];\n        req.oauth2.logger.debug('Bearer token parsed from authorization header: ', token);\n    }\n    // Look for token in query string\n    else if (req.query && req.query['access_token']) {\n        token = req.query['access_token'];\n        req.oauth2.logger.debug('Bearer token parsed from query params: ', token);\n    }\n    // Look for token in post body\n    else if (req.body && req.body['access_token']) {\n        token = req.body['access_token'];\n        req.oauth2.logger.debug('Bearer token parsed from body params: ', token);\n    }\n    // Not found\n    else\n        return response.error(req, res, new error.accessDenied('Bearer token not found'));\n\n    // Try to fetch access token\n    req.oauth2.model.accessToken.fetchByToken(token, function(err, object) {\n        if (err)\n            response.error(req, res, err);\n        else if (!object) {\n            response.error(req, res, new error.forbidden('Token not found or expired'));\n        }\n        else if (!req.oauth2.model.accessToken.checkTTL(object)) {\n            response.error(req, res, new error.forbidden('Token already expired'))\n        }\n        else {\n            req.oauth2.accessToken = object;\n            req.oauth2.logger.debug('AccessToken fetched: ', object);\n            next();\n        };\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/controller/authorization/decision.js":"var error = require('./../../error');\n\n/**\n * Decision controller\n * Used for: \"authorization_code\"\n * Page is used to ask user whether user agree or not to allow client to access his information with current scope\n * It should return a POST form with \"decision\" parameter:\n * 0 - if user does not allow client to obtain access\n * 1 - if user allows\n * For basic example look into ./test/server/oauth20.js\n *\n * @param req Request object\n * @param res Response object\n * @param client Client object\n * @param scope Scope asked\n * @param user User object\n */\nmodule.exports = function(req, res, client, scope, user) {\n    throw new error.serverError('Decision page is not implemented');\n};","/home/travis/build/npmtest/node-npmtest-oauth20-provider/node_modules/oauth20-provider/lib/util/logger.js":"/**\n * Used log levels, from low priority to high\n */\nvar levels = [\n    'debug',\n    'info',\n    'warn',\n    'error'\n];\n\n/**\n * Colors for log levels.\n */\nvar colors = [\n    90,\n    36,\n    33,\n    31\n];\n\n/**\n * Pads the nice output to the longest log level.\n */\nfunction pad (str) {\n    var max = 0;\n\n    for (var i = 0, l = levels.length; i < l; i++)\n        max = Math.max(max, levels[i].length);\n\n    if (str.length < max)\n        return str + new Array(max - str.length + 1).join(' ');\n\n    return str;\n};\n\n/**\n * Console logging class\n *\n * @param options\n * @constructor\n */\nvar Logger = function(options) {\n    // Force options or die\n    this.colors = false !== options.colors;\n    this.level = options.level || 0;\n};\n\n/**\n * Log method\n *\n * @api public\n */\nLogger.prototype.log = function (type) {\n    var typeLevel = levels.indexOf(type);\n\n    if (typeLevel < this.level) return;\n\n    console.log.apply(\n        console,\n        [this.colors ? '\\033[' + colors[typeLevel] + 'm' + pad(type) + ':\\033[39m' : type + ':']\n            .concat(Array.prototype.slice.call(arguments, 1))\n    );\n};\n\n/**\n * Generate methods for each level\n */\nlevels.forEach(function (name) {\n    Logger.prototype[name] = function () {\n        this.log.apply(this, [name].concat(Array.prototype.slice.call(arguments)));\n    };\n});\n\n\nmodule.exports = Logger;"}